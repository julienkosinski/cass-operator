kind: ConfigMap
apiVersion: v1
metadata:
  name: vector-config
  namespace: cass-operator
data:
  vector.toml: |
    [sources.systemlog]
    type = "file"
    include = [ "/var/log/cassandra/system.log" ]
    read_from = "beginning"
    fingerprint.strategy = "device_and_inode"

    [sources.systemlog.multiline]
    start_pattern = "^(INFO|WARN|ERROR|DEBUG|TRACE|FATAL)"
    condition_pattern = "^(INFO|WARN|ERROR|DEBUG|TRACE|FATAL)"
    mode = "halt_before"
    timeout_ms = 10000

    [transforms.parse_cassandra_log]
    type = "remap"
    inputs = [ "systemlog" ]
    source = '''
    del(.source_type)
    . |= parse_groks!(.message, patterns: [
      "%{LOGLEVEL:loglevel}\\s+\\[(?<thread>((.+)))\\]\\s+%{TIMESTAMP_ISO8601:timestamp}\\s+%{JAVACLASS:class}:%{NUMBER:line}\\s+-\\s+(?<message>(.+\\n?)+)",
      ]
    )
    pod_name, err = get_env_var("POD_NAME")
    if err == null {
      .pod_name = pod_name
    }

    node_name, err = get_env_var("NODE_NAME")
    if err == null {
      .node_name = node_name
    }

    cluster, err = get_env_var("CLUSTER_NAME")
    if err == null {
      .cluster = cluster
    }

    datacenter, err = get_env_var("DATACENTER_NAME")
    if err == null {
      .datacenter = datacenter
    }

    rack, err = get_env_var("RACK_NAME")
    if err == null {
      .rack = rack
    }

    namespace, err = get_env_var("NAMESPACE")
    if err == null {
      .namespace = namespace
    }
    '''

    [sinks.console]
    type = "console"
    inputs = ["parse_cassandra_log"]
    target = "stdout"
    encoding.codec = "json"
